/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.HiloCliente;
import Modelo.Autor;
import Modelo.Coleccion;
import Modelo.Comic;
import Modelo.Tabla.TablaColecciones;
import Modelo.Tabla.TablaComics;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.JOptionPane;
import java.awt.GridLayout;
import java.awt.Dimension;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author Angel Flores
 * 
 */
public class GestionColeccionesPanel extends javax.swing.JPanel {


    HiloCliente h;
    private String coleccionEliminada;
    private String errorBorradoColeccion;
    private String existeColeccion;
    private String coleccionCreada;
    private String errorCreadoColeccion;
    private Object camposObligatorios;

    /**
     * Creates new form GestionColeccionesPanel
     *
     * @param h
     */
    public GestionColeccionesPanel(HiloCliente h) {
        initComponents();

        this.h = h;
        setLayout(new GridLayout(0, 1, 0, 0));
        add(jScrollPane2);

        refrescarTabla();

        traduccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblGestionColecciones = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaColecciones = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnAnadir = new javax.swing.JButton();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblEdicion = new javax.swing.JLabel();
        cmbEdicion = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setToolTipText("");
        setPreferredSize(new Dimension(634, 594));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setPreferredSize(new java.awt.Dimension(518, 491));

        lblGestionColecciones.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGestionColecciones.setText("Gestión de colecciones");

        tablaColecciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaColecciones.setRowHeight(45);
        jScrollPane3.setViewportView(tablaColecciones);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAnadir.setText("Añadir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre");

        lblEdicion.setText("Edición");

        cmbEdicion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especial", "Limitada", "Coleccionista", "Básica" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(32)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        					.addComponent(btnAnadir)
        					.addGroup(jPanel1Layout.createSequentialGroup()
        						.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(lblNombre)
        							.addComponent(lblEdicion))
        						.addGap(18)
        						.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        							.addComponent(txtNombre)
        							.addComponent(cmbEdicion, GroupLayout.PREFERRED_SIZE, 205, GroupLayout.PREFERRED_SIZE)
        							.addComponent(btnEliminar, Alignment.TRAILING))))
        				.addComponent(lblGestionColecciones, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(19)
        			.addComponent(lblGestionColecciones, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 176, GroupLayout.PREFERRED_SIZE)
        			.addGap(23)
        			.addComponent(btnEliminar)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblNombre)
        				.addComponent(txtNombre, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblEdicion)
        				.addComponent(cmbEdicion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(27)
        			.addComponent(btnAnadir)
        			.addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        jScrollPane2.setViewportView(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        String nomColeccion = (String) tablaColecciones.getModel().getValueAt(tablaColecciones.getSelectedRow(), 0);

        if (nomColeccion == null) {
            JOptionPane.showMessageDialog(null, "No hay una colección seleccionada");
        } else {
        
            int opt = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar la "
            + "coleccion con nombre: " + nomColeccion + " ? Los cambios realizados son permanentes", "Eliminar un cómic", JOptionPane.YES_NO_OPTION);

        if (opt == JOptionPane.YES_OPTION) {
            int result = h.solicitarEliminarColeccion(nomColeccion);

            switch (result) {
                case 1:
                    JOptionPane.showMessageDialog(null, coleccionEliminada);
                    refrescarTabla();
                    break;
                case -1:
                    JOptionPane.showMessageDialog(null, "No es posible borrar la colección seleccionada."
                            + "Por seguridad debes borrar antes los cómics asociados.");
                    break;
                default:
                    JOptionPane.showMessageDialog(null, errorBorradoColeccion);
                    break;
            }

        }
            
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        
        if (txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, camposObligatorios);
        } else {

            Coleccion coleccion = new Coleccion(txtNombre.getText(), cmbEdicion.getSelectedItem().toString());

            if (h.solicitarGetColeccion(txtNombre.getText()) != null) {
                JOptionPane.showMessageDialog(null, existeColeccion);
            } else {

                int result = h.solicitarAnhadirColeccion(coleccion);

                if (result == 1) {
                    JOptionPane.showMessageDialog(null, coleccionCreada);

                    txtNombre.setText("");

                    refrescarTabla();

                } else {
                    JOptionPane.showMessageDialog(null, errorCreadoColeccion);
                }

            }

        }
    }//GEN-LAST:event_btnAnadirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cmbEdicion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEdicion;
    private javax.swing.JLabel lblGestionColecciones;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTable tablaColecciones;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void refrescarTabla() {

        ArrayList<Coleccion> listaColecciones = (ArrayList<Coleccion>) h.solicitarListaColecciones();

        TablaColecciones modeloTabla = new TablaColecciones(listaColecciones, h);
        tablaColecciones.setModel(modeloTabla);

    }

    public static boolean validarFecha(String fechaIntroducida) {

        try {

            LocalDate fecha = LocalDate.parse(fechaIntroducida, DateTimeFormatter.ISO_LOCAL_DATE);
            return true;

        } catch (DateTimeParseException ex) {
            return false;
        }

    }

    private void traduccion() {

        ResourceBundle rb = ResourceBundle.getBundle("Idiomas.idioma");

        activarTraduccion(rb);

    }

    private void activarTraduccion(ResourceBundle rb) {

        btnAnadir.setText(rb.getString("btnAñadir"));

        camposObligatorios = rb.getString("camposObligatorios");
        coleccionEliminada = rb.getString("coleccionEliminada");
        errorBorradoColeccion = rb.getString("errorBorradoColeccion");
        existeColeccion = rb.getString("existeColeccion");
        coleccionCreada = rb.getString("coleccionCreada");
        errorCreadoColeccion = rb.getString("errorCreadoColeccion");
        

    }
    
}
